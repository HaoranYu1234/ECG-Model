import numpy as np
import matplotlib.pyplot as plt

L = 30/72  # frequency

# Parameters
params = {
    "pwav": [0.25, 0.09, 0.2],
    "qrswav": [1.6, 0.11, 0],
    "qwav": [0.025, 0.066, 0.166],
    "swav": [0.45, 0.066, 0.09],
    "twav": [0.35, 0.142, 0.3],
    "uwav": [0.035, 0.0476, 0.433]
}

def compute_wave(a, d, t, L, wave_type=""):
    x = np.arange(0.01, 2.01, 0.01) + t
    d /= 2
    n = 100
    if wave_type in ["qwav", "swav"]:
        a0 = (a / (2 * L / d)) * (2 - L / d)
        an = 0
        for i in range(1, n + 1):
            an_term = (((2 * L * a) / (i * i * np.pi * np.pi * d)) * (1 - np.cos((i * np.pi * d) / L))) * np.cos((i * np.pi * x) / L)
            an += an_term
        if wave_type == "qwav":
            return -1 * (1 / L + a0 / 2 + an)
        return -1 * (a0 + an)
    else:
        a0 = 1 / L
        an = 0
        for i in range(1, n + 1):
            an_term = -4 * d * L / (np.pi * (4 * d**2 * i**2 - L**2)) * np.cos(np.pi * d * i / L) * np.cos(i * np.pi * x / L)
            an += an_term
        return a * (a0 / 2 + an)

def compute_qrs(a, d, L):
    x = np.arange(0.01, 2.01, 0.01)
    n = 100
    a0 = (a / (2 * d / L)) * (2 - d / L)
    an = 0
    for i in range(1, n + 1):
        an_term = (((2 * L * a) / (i * i * np.pi * np.pi * d)) * (1 - np.cos((i * np.pi * d) / L))) * np.cos((i * np.pi * x) / L)
        an += an_term
    return a0 / 2 + an

# Compute the waves
waves = {
    "P": compute_wave(*params["pwav"], L),
    "QRS": compute_qrs(*params["qrswav"][:-1], L),
    "Q": compute_wave(*params["qwav"], L, "qwav"),
    "S": compute_wave(*params["swav"], L, "swav"),
    "T": compute_wave(*params["twav"], L),
    "U": compute_wave(*params["uwav"], L)
}

ecg = sum(waves.values())

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(ecg)
plt.title("ECG Signal")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.grid(True)
plt.show()
